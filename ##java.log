[1845] <JyZyXEL> whats a good way to represent infinity in java?
[1845] <it_> The class Double has constants for infinity?
[1846] <ron> ~javadoc Double.POSITIVE_INFINITY
[1846] <javabot> ron: http://bit.ly/1vFrKfl [JDK: java.lang.Double#POSITIVE_INFINITY:double]
[1846] <JyZyXEL> ~javadoc Integer.POSITIVE_INFINITY
[1846] <javabot> I have no documentation for Integer.POSITIVE_INFINITY
[1846] <it_> Nice try but the way integers are represented in a computer there is no infinity
[1847] <it_> I'm not sure but I think the infinity from double is due to values having 2 representations?
[1847] <cheeser> well, infinity is NaN so you can't represent it anyway
[1847] <jink> Well, it's a different kind of NaN, isn't it?
[1849] <Matthijs> It's just as useless.
[1850] <ron> Matthijs: just like you!
[1850] <Matthijs> ron: <3
[1850] <ron> :*
[1851] <JyZyXEL> infinity is needed in the Floydd-Warshall agorithm
[1852] <ron> Oh~ The Floydd-Warshall algorithm! Why didn't you say so in the first place?!
[1852] <jink> ~slap ron
[1853] <javabot> ACTION slaps ron.  Thank you.  Come again please.
[1853] <ron> javabot: :*
[1853] <javabot> ron, what does that even *mean*?
[1853] <ron> er, fuck this client.
[1853] <JyZyXEL> there its important that if you sum something with infinity, Math.min() still handles it correctly
[1853] <jink> ron: <3
[1853] <jink> http://algs4.cs.princeton.edu/44sp/FloydWarshall.java.html
[1854] <JyZyXEL> yeah looks like they use Double.POSITIVE_INFINITY
[1854] <ron> OH MY GOD
[1854] <jink> ~next
[1854] <javabot> Another satisfied customer. Next!
[1854] <ron> sonOfRa: stfu
[1855] <ron> jink: dude, the authors of it are Sedgewick and Wayne. It should be called Sedgewick-Wayne.
[1855] <jink> Obviously.
[1856] <JyZyXEL> oh looks like they are using double[][] instead of Double[][]
[1856] <jink> Yes.
[1856] <jink> Because there's no point in boxing / unboxing the primitive.
[1857] <surial> JyZyXEL: Double.POSITIVE_INFINITY is a double. Lowercase d.
[1857] <Pessimist> ~pastebin
[1857] <javabot> http://eugeneciurana.com/pastebin
[1858] <ron> surial: would you like to be my Double?
[1858] <surial> I thought you'd never ask!
[1858] <JyZyXEL> here is my Floyd-Warshall implementation in Java: http://pastebin.com/b6X7u4V5
[1858] <jink> xD
[1858] <ron> ;)
[1858] <ron> JyZyXEL: nobody cares.
[1858] <jink> ~ron++
[1858] <javabot> ron has a karma level of 158, jink
[1858] <jink> Hahahahahaha
[1859] <surial> JyZyXEL: if you want a code review...
[1859] <JyZyXEL> code review: Yup.
[1859] <surial> JyZyXEL: (A) You can't feasible write or read java code without some basic english, that is unavoidable. Therefore, go all the way and use english identifiers. no 'mista' and no 'minne'.
[1859] <surial> Break that rule only if there's jargon that doesn't have obvious translations or would frustrate readability because it would decouple the concept from the jargon name.
[1859] <JyZyXEL> surial: sorry i forgot to replace them with 'from' 'to'
[1900] <surial> JyZyXEL: (B) I don't mind if/else statements without braces, but only if you stick em on the same line. This reeks of leading to the dreaded apple bug.
[1900] <surial> JyZyXEL: So, if (i == j) distances[i][j] = 0; all on the same line (line 11 in the paste), or add braces.
[1900] <JyZyXEL> ohh! whats the apple bug?
[1900] <jink> Not "or".  Just add braces.
[1900] <surial> JyZyXEL: A pretty serious security leak.
[1901] <JyZyXEL> i absolutely LOVE not using braces :)
[1901] <dreamreal> JyZyXEL: that's... um
[1901] <jink> And I absolutely HATE you for it.
[1901] <dreamreal> ACTION is trying to resist pointing out that JyZyXEL is basically waving a giant "I R A MORAN" flag
[1901] <surial> JyZyXEL: https://www.imperialviolet.org/2014/02/22/applebug.html
[1902] <JyZyXEL> i've been doing it for so long that my brain is totally wired to spot that bug
[1902] <surial> JyZyXEL: I'm already waaaaaaay out there with my 'no braces are okay, as long as its a one-liner (which implies the statement itself is very simple)'. Look, even if you think its the best thing since apple pie, if you are the only one in the entire java community that engages in that code style, the upshot is that you get annoyed when reading any other code, and everybody else gets annoyed when they read yours. There's a
[1903] <surial>  humongous cost to breaking the mold. You really want to spend it for this? No, that'd be stupid. Hence the I R A MORAN flag.
[1903] <surial> JyZyXEL: cut it out.
[1903] <surial> JyZyXEL: we all spotted that bug immediately.
[1903] <surial> JyZyXEL: It's when you aren't looking at it as much, or when others edit your code, and it goes wrong.
[1903] <dreamreal> JyZyXEL: the good news is that python is ---> thataway.
[1903] <JyZyXEL> surial: yeah thats a bad thing, i didn't realize other people find this bad practice
[1904] <dreamreal> JyZyXEL: well, in your defense, NO OTHER LANGUAGE EVER prefers avoiding braces if the construct exists.
[1904] <dreamreal> Oh wait, that's not a defense at all
[1904] <jink> :')
[1904] <jink> dreamreal: Monday, hmm? :)
[1904] <surial> JyZyXEL: (C) in general, when you have a range of n items, the right move is to let that run from [0, n-1]. You've chosen to go with [1, n]. This just means you need to add a crapload of +1 everywhere.
[1904] <surial> JyZyXEL: ... and it's again counter to the java conventions, which prefer 0-based.
[1905] <jink> surial: Or -1, depending on your POV.
[1905] <surial> so, for (int x = 0; x < n; x++). Also note that you waste the 0 slot of your arrays in your example, and you had to declare your connections array to be n+1/n+1 in size, whereas n/n would have sufficed.
[1906] <dreamreal> JyZyXEL: I suppose I can understand your aversion to braces, though, considering how slow they make your code.
[1906] <eptalon> heyas
[1906] <dreamreal> Oh wait, they don't have ANY runtime impact except for that stupid "making your code more likely to be correct" bit.
[1906] <surial> JyZyXEL: (D) a boolean array is suspicous, especially a multidim one. Things can often be made far more efficient with bitpacking strategies. If n ever grows large, this is not going to have nice memory performance (a boolean eats anywhere from 8 to 64 (!!!!) bits per boolean! It could have been done with 1!). If the 'n' never gets particularly large this mostly doesn't matter, no sense uglying up your code to handle it. Still,
[1906] <surial>  worth mentioning.
[1906] <dreamreal> and most people see that as an advantage.
[1906] <dreamreal> heh, he should be using a bitset, I suppose. (I'm avoiding his code.)
[1907] <surial> JyZyXEL: There, that'll get you going for a while.
[1907] <JyZyXEL> dreamreal: so is this still ok: if (something) return false;
[1907] <surial> JyZyXEL: That's far less controversial.
[1907] <dreamreal> JyZyXEL: I'd say no, personally.
[1907] <surial> I say yes.
[1908] <dreamreal> It IS less controversial, and it MIGHT slide, but personally, I'd add the braces because you KNOW some moron's going to say "Let me add some behavior before I return..."
[1908] <eptalon> JyZyXEL: personally, I'd always use braces, but thats just me.
[1908] <JyZyXEL> i love sparing lines so that more code fits in the screen at once
[1908] <dreamreal> Note the abundance of "personally" there.
[1908] <dreamreal> JyZyXEL: this is stupid of you.
[1908] <surial> dreamreal: Why?
[1908] <dreamreal> JyZyXEL: seriously, use python.
[1908] <eptalon> JyZyXEL: I think heartbleed is basically a forgoten pair of braces.
[1908] <JyZyXEL> dreamreal: i did use python once and i loved it :D
[1909] <surial> dreamreal: What's so bad about wishing to keep simple things that most brains can parse 'atomically' from smearing out across a tonne of lines?
[1909] <dreamreal> surial: Why would I add braces? Because of the explicit nature of the block. Like I say, some day someone's going to add behavior and screw it up.
[1909] <surial> It's a tradeoff.
[1909] <JyZyXEL> eptalon: nope hearbleed was something else
[1909] <dreamreal> And I keep saying "personally" because it ISN'T complicated code, and it would probably be okay. But my impulse would be to add braces.
[1909] <surial> With braces, debug-stepping is easier, stacktrace lines localize better, and adding stuff is simpler. But, on the flipside, it makes things look more impressive than they were intended, and they waste vertical space.
[1910] <JyZyXEL> surial: whats a better alternative to boolean array?
[1910] <dreamreal> but at the same time, some hosehead's going to write "if(foo) return bar;" knowing dadgum well he's going to add something else between the if() and the return, and screw that up because he's a moron.
[1910] <dreamreal> JyZyXEL: bitset.
[1910] <eptalon> JyZyXEL: then it was something else. I remember a relatively prominent (hifg-profile, media) bug in spring that boils down: forgot the braces, and without braces, I return too early.
[1910] <surial> eptalon: heartbleed was an epic clusterfuck. About 8 things went wrong in sequence and if even one hadn't, heartbleed wouldn't have happened. every single one of the 8 is something I would laugh at, if it was written in a book, as 'ridiculous, would never happen'. heartbleed's best upside is the wake up call it was: The open source security process can be an UTTER shithouse. Don't trust it just cuz.
[1911] <Matthijs> dreamreal: If both the programmer and the review guy are morons, you're doing something wrong anyway
[1911] <surial> eptalon: It's the fucking bug I linked to earlier, pay attention.
[1911] <surial> https://www.imperialviolet.org/2014/02/22/applebug.html
[1911] <surial> dreamreal: if the argument is 'because morons will fuck it up', you can't write any code at all.
[1911] <eptalon> surial: yep. thats the one
[1911] <dreamreal> Matthijs: yeah, well. In my team of five, I'm pretty convinced three are utter morons... who would probably get hired almost anywhere.
[1912] <dreamreal> surial: I can, however, write code so that morons have to put some effort into it.
[1912] <surial> It's the go-to style argument once you lose, basically. godwin's law for style arguments: ...butbut, morans!
[1912] <sproingie> surial: but ... but ... many eyes!
[1912] <surial> sproingie: yeah :/ – hey, I'm disappointed too!
[1912] <Anthaas> A little behind here, but I am with dreamreal - I always add braces for the very same reason he gave.
[1912] <dreamreal> surial: I don't *personally* ever want to have to manage implicit blocks. I'm just not smart enough for it.
[1912] <Anthaas> Plus, its also a matter of consistency
[1912] <eptalon> always having two braces, an opening and a closing one, is more foolproof...
[1913] <Anthaas> ^
[1913] <surial> dreamreal: Yes, not handing out bazookas has some merit, but if they can't get this right, they have exceeded my skills at fencing off idiocy. I can't even fathom it anymore. No point attempting to get out ahead of it.
[1913] <dreamreal> I want my code to be as simple as I can possibly make it, because I'm not that freaking bright, and I don't want to rely on my own memory. If I see an if(), I expect a block... making that block explicit keeps my simple mind happy and focused on other things.
[1913] <sproingie> surial: yeah stuff like the debian host key bug was a big glitch, heartbleed exposed some systemic and ongoing fuckups
[1914] <surial> dreamreal: Trying to prevent the issue you foresee is at the same level, for me, as something like: "x = x + 1; // add 1 to x".
[1914] <surial> dreamreal: If I fence that far, I'd never get anything done.
[1914] <dreamreal> surial: for me it ALL comes down to chunking. Blocks are chunks I don't want to think about. Ever. I do that with a LOT of coding practices, and it's one of the things that makes writing example code really, really, really annoying for me.
[1915] <surial> sproingie: The impact of heartbleed isn't interesting to me (well, with enough tinfoil hattery, it is pretty fucking ginormous, and the notion that various widespread services have been compromised by it mixed with the idea that it's all interconnected, that part is kind of interesting). But the most interesting thing is simply that it could ever have happened.
[1915] <dreamreal> if I have to think about a block structure, I've done it wrong. It's that simple.
[1915] <surial> dreamreal: There's some merit to the argument. I love blocks. I even (relatively often) just toss a pair of braces in there just to group things together and add lexical scope.
[1915] <dreamreal> And yes, I understand, you're brilliant and never have to compensate for the number of things you have in your head at any given time. I'm not like that. I'm an average-intellect, ADHD coder with three kids to manage.
[1915] <sproingie> coding standards around here are "always use braces no matter what".  being that my little corner is a perl shop, that's not hard to enforce (perl always requires the braces)
[1916] <surial>  /* Explanation of task */ { \n codeHere(); int iGetTOdeclareVarsThatWontBeVisibleOutsideOfThisBlock = 0; }\n
[1916] <surial> dreamreal: Well, _there's_ your problem.
[1916] <dreamreal> ACTION shrugs. It's a life.
[1917] <dreamreal> I can't do a lot about it. The kids are growing up, and I still have to feed 'em.
[1917] <Anthaas_> s/kids/colleauges
[1919] <Anthaas_> I see it this way, if I removed code from my if block such that it only contained a return statement, I wouldn't remove the braces, so why not add them? If you are REALLY bothered about having an extra line, just move the braces to the same line as your if/return statements
[1919] <Anthaas_> right, now how do I change my name?
[1920] <day> do people really care about line count? o0
[1920] <dreamreal> go to the social security office, ask how to...
[1920] <dreamreal> Anthaas_: /nick in most irc clients
[1920] <Anthaas_> some managers use it as a metric to see how efficient a developer is.
[1920] <Anthaas_> Or to measure project size.
[1920] <eptalon> day: On a very broad level, probably yes.
[1920] <day> Anthaas_: wow
[1920] <Anthaas> There we go
[1921] <day> Anthaas: how does that even make sense. maybe the guy writes more simple lines that he can type faster :/
[1921] <Anthaas> Yeah, its debated whether it is accurate or what exactly it is measuring - doesnt take a lot into account.
[1921] <eptalon> day: If you have very large methods that have a lot of parts that repeat, you know that moving the repeating parts to their own method is probably a good idea
[1921] <matty_r> Isn't line count occasionally a used as some sort of quota?
[1922] <eptalon> matty_r: as in: no, you haven't typed 500 lines today, you can't go home yet?
[1922] <Anthaas> I know it is often used to determine size of projects, and from that the number of man hours required and from that the number of people required.
[1922] <dreamreal> day: personally, line count doesn't make sense below the granularity of about 1k lines
[1922] <matty_r> eptalon: yea
[1923] <Anthaas> I wouldn't have thought so.
[1923] <Anthaas> At least I've not heard of it.
[1923] <eptalon> dreamreal: Any class with a decent level of complexity will have more than 1k lines...
[1923] <dreamreal> eptalon: of course. Note what I said.
[1923] <day> i dont even get why a programmer needs to be measured. YOu get a task, agree on a time frame. Idk. how he gets it done
[1924] <matty_r> I heard back in the day that programmers at Microsoft had to do a minimum of 2000 lines or something like that.
[1924] <day> Idc.
[1924] <Anthaas> day: I wish you were my manager at my last place.
[1924] <eptalon> day: Complexity...
[1924] <dreamreal> The *granularity* is 1k. A 2kloc class is perceptibly bigger than a 1kloc class. That doesn't mean it's more complex, but on cursory overview it probably is.
[1925] <dreamreal> a 2100 loc class is about the same as a 2500 loc class. The *granularity* is the factor, not the actual line count.
[1926] <Anthaas> The worst type of manager I think is the type who measures all future projects based on previous projects.
[1926] <day> maybe i have the wrong mindset in that regard. Ive only ever seen midsize companies. They usually have no time for clean code, documentation etc. They are happy if they meet the deadlines :P
[1926] <Anthaas> One project took 3 weeks to complete (small one), therefore ALL projects must take 3 weeks to complete, if not what are you doing wrong and why are you wasting time?
[1926] <JyZyXEL> so would "boolean[][] connections = new boolean[n][n]" be replaced by "BitSet[][] connections = new BitSet[n][n]" or what?
[1926] <idletask> day: I believe this trait is not unique to midsize companies
[1926] <dreamreal> it isn't.
[1926] <day> probably not yes.
[1927] <dreamreal> at $work I'm having to deal with this problem: "we need a demo NOW" ... "now we need to convert the data to something OWL-ish"
[1927] <sproingie> then it's the priorities of the company.  we have deadlines, but submitting clean code is part of the process.  your code doesn't pass review, it doesn't go in.
[1927] <dreamreal> much pain ensues.
[1927] <idletask> As a pro in the field I believe you have to shelve your dissatisfaction -- and have a very large shelf
[1927] <eptalon> JyZyXEL: or a map, mapping a String to a Boolean?
[1927] <Anthaas> Everything needs to be done NOW?
[1927] <JyZyXEL> what
[1927] <dreamreal> Anthaas: it's the agile way! :) (Actually, it's not, but there's a lot of pressure for specific deliverables)
[1927] <Anthaas> I stood my ground once and introduced my (not patented) "Put it on the list or No" method.
[1928] <day> sproingie: i think thats the right way
[1928] <dreamreal> we had the problem of the CEO interfering, by asking for a demo
[1928] <eptalon> JyZyXEL: Map<String,Boolean> c=new HashMap<>(); c.put("FooBar",Boolean.TRUE)
[1928] <Anthaas> Hahaha I've been there!
[1928] <Anthaas> Wanted a demo on something we started the week before...
[1928] <dreamreal> eptalon: he needs a bitset
[1928] <day> sproingie: it becomes a problem, if you have a personal clinche with the testing department tho :>
[1928] <JyZyXEL> ummm, what the heck
[1928] <Anthaas> "You aren't familiar with how software development works, are you?"
[1928] <JyZyXEL> i was trying to replace a boolean[][]
[1929] <eptalon> JyZyXEL: Or use a BitSet.
[1929] <dreamreal> eptalon: see?
[1929] <dreamreal> He needs a bitset.
[1929] <Matthijs> dreamreal: He (JyZyXEL) just proposed a BitSet[][] instead of a boolean[][] :)
[1930] <sproingie> day: part of the requirement for new code is unit tests, so much of that testing falls to us.  the dedicated QA guys literally sit right next to us and are in every dev meeting
[1930] <Anthaas> At least you had QA guys!
[1930] <sproingie> not that much of the legacy code we inherited has any kind of usable unit tests, but it's my job to write those
[1930] <JyZyXEL> im not quite sure how to replace it with bitset
[1930] <sproingie> (as opposed to yakking on irc)
[1930] <dreamreal> Matthijs: ....
[1930] <Anthaas> All QA/Testing fell on the dev that made the product in my last place...
[1930] <dreamreal> WTF
[1931] <Matthijs> JyZyXEL: Read the docs on BitSet, it might give you a clue.
[1931] <sproingie> Anthaas: yeah, you never have the dev do acceptance tests, they have all the assumptions about how to make it work already in their head
[1931] <day> Anthaas: thats hilarious :D
[1931] <sbalmos> sounds pretty typical to me...
[1931] <Anthaas> Exactly - the CEO/Managers didn't see it that way.
[1931] <day> i test as well, until it works xD
[1931] <sproingie> as it is i hardly even do integration tests except by accident because a dependency is too hard to mock
[1931] <Anthaas> "If you know how it should work - you should know how it shouldn't work."
[1932] <Anthaas> Well, theoretically, I do....
[1932] <Anthaas> But Im not stupid enough to use my software incorrectly...
[1932] <sbalmos> Even better when my logic is wrong... 8 times... and I can explain the logic all 8 times and it makes sense after whiteboarding and explaining
[1932] <day> plus you make sure that it passes if you have to meet your deadline
[1932] <sbalmos> But not in real life
[1932] <sproingie> Anthaas: that or the documentation for using it correctly is just in your head
[1933] <Anthaas> Documentation hahahahahahahahahaha
[1933] <Anthaas> Yeah we werent allowed time for that.
[1933] <Anthaas> We had to explain to clients how it was used.
[1933] <day> :D
[1933] <day> its the same here. THey simply can not fire the rnd department. Its impossible
[1933] <JyZyXEL> i don't think its a good idea because then indexing it becomes harder
[1933] <sbalmos> manuals and documentation are for the Support people to whack over the customers' heads saying "it's in the manual, READ IT!"
[1934] <Anthaas> We actually had a customer service guy say "Is it OK if you guys talk through the client about the progress of their product." "Errr, it's not really our job, but if our manager says we should then sure." "Ok good, the client has just got here..."
[1934] <JyZyXEL> perhaps int[][] would be a little better
[1935] <eptalon> JyZyXEL: what are you trying to achieve?
[1935] <JyZyXEL> thats what the algorithm books for c++ use for this
[1935] <JyZyXEL> eptalon: adjacency matrix for floyd-warshall
[1935] <Matthijs> C++ doesn't have a BitSet.
[1935] <Anthaas> C++ != Java
[1936] <Anthaas> JyZyXEL: What are you ultimately trying to achieve?
[1936] <eptalon> JyZyXEL: so if 5 and 4 are adjacent, adj[5][4]==1 ?
[1936] <JyZyXEL> eptalon: if there is a path from node 5 to node 4
[1936] <JyZyXEL> in the graph
[1937] <eptalon> JyZyXEL: thats what adjacency usually means, yes.
[1937] <eptalon> JyZyXEL: you have weighed graphs?
[1938] <JyZyXEL> i think boolean[][] is really intuitive way to describe it
[1938] <JyZyXEL> no
[1938] <eptalon> JyZyXEL: the problem with Boolean/boolean is that ir uses "a lot of memory".
[1938] <aaearon> im decoding a json string that contains escaped unicode characters such as \u00c3\u00. after i decode the unicode character, its showing as Ã¼ instead of ü. im having a hard time finding a solution. can someone point me in the right direction?
[1938] <JyZyXEL> eptalon: would int use less memory?
[1939] <Anthaas> For an adjacency matrix I'd just use boolean if there are no heuristics.
[1939] <eptalon> JyZyXEL: not sure. you could use BitSet, if you find a way to uniquely map a two-dimensional array to a one-dimensional bitset.
[1940] <idletask> aaearon: why not use a JSON library to do the job for you?
[1940] <Anthaas> and array[x][y] == 1 iff X is adjacent to Y
[1940] <eptalon> JyZyXEL: how big are the graphs you are trying to treat? - hundreds of nodes, thousands?
[1941] <Anthaas> I'd like <10
[1941] <Anthaas> to guess*
[1941] <JyZyXEL> eptalon: 100 nodes max
[1941] <aaearon> idletask after i pass the json string into JSONObject i am still getting the Ã¼ characters so it seems like the org.json library isnt doing it. should it be?
[1941] <JyZyXEL> this is an O(n^3) algorithm anyways
[1941] <eptalon> JyZyXEL: no guarantees as to efficiency; two-dimensional-array of boolean or int works.
[1942] <idletask> aaearon: eh wait; is your original JSON a JSON String or a JSON Object? As to JSON libraries, well, imnsho anything is better than org.json
[1943] <aaearon> so im reading a json string from a url then passing on the string to a JSONObject
[1943] <eptalon> JyZyXEL: Of what I remember, the best performance algos for the task I know are in the order of n²...
[1943] <aaearon> maybe i need to cut my losses and look at gson?
[1943] <idletask> Or Jackson
[1944] <JyZyXEL> probably yeah
[1944] <JyZyXEL> this one is quite easy to implement and good for n=100
[1944] <eptalon> JyZyXEL: so: solve the problem, make it work, and then worry about optimizing.
[1944] <JyZyXEL> indeed
[1944] <demifuror> guys, im new to semaphores in java, and one thing im unsure of is, i do sem.acquire(), then my critical code, then sem.release(). do i also need to wrap my critical code in a synchronized(this) block also?
[1945] <eptalon> demifuror: if semaphore is decently implemented, no.
[1945] <freeone3000> demifuror: No. If no permits are available, the semaphore will block.
[1945] <demifuror> eptalon: its just a java.util.concurrent semaphore
[1945] <demifuror> freeone3000: okay thanks
[1946] <idletask> demifuror: also, be sure to correctly "code for it"; ie, acquire() before a try block and release() in finally
[1946] <demifuror> i'm seeing some output that would indicate that all is not working as expected, was hoping that was why, but i best keep digging :)
[1946] <eptalon> demifuror: then no.
[1948] <demifuror> is this okay? try{ sem.acquire(); // critical code; } catch (InterruptedException e) {} finally { sem.release(); }
[1948] <demifuror> sorry, that was meant for idletask
[1948] <idletask> demifuror: no, you should .acquire() _before_ try
[1949] <eptalon> demifuror: sem.acquire(); try { criticalSection();} finally {sem.release();}
[1949] <demifuror> idletask: but the critical code im trying to execute doesnt throw an exception...why should it be in a try?
[1949] <freeone3000> demifuror: You can't prove that it doesn't. RuntimeExceptions are unchecked.
[1950] <eptalon> demifuror: because finally is always executed, and you need a try for a finally
[1950] <idletask> And so are errors (example: OOM)
[1952] <demifuror> oh okay guys, ill *try* that then! :D thank you all :)
[2005] <surial> demifuror: note, catch (InterruptedException e) {} is wrong.
[2006] <surial> demifuror: when you catch an interruptedexception, you should abort the thread as soon as possible. For example, with 'return;', if  you're in a run() method or other top-level handler.
[2011] <patarr> Anyone have opinions on sl4j vs log4j? I love the string formatting slf4j has, but it appears to be slower than log4j by some online benchmarks.
[2012] <cheeser> did you try log4j2?
[2012] <patarr> Ah. I totally just realized it's just a facade to log4j, or logback.
[2012] <freeone3000> patarr: It's async - actual performance doesn't matter, except in an abstract sense.
[2012] <cheeser> supposedly better
[2012] <patarr> freeone3000: I believe the async is only if you specify it using the async appender.
[2012] <freeone3000> patarr: Yes. You should be doing this.
[2013] <freeone3000> *especially* if you're benchmarking your logging framework.
[2013] <freeone3000> (ie, you have reason to believe that logging is slowing down your code0
[2013] <patarr> If it's async, there may be a chance of losing a message or two in the case of failure no?
[2014] <freeone3000> patarr: If by "failure" you mean "the VM dies", yes.
[2014] <freeone3000> patarr: Or it can't write to backing store, but then you lose messages either way.
[2014] <patarr> Can you explain that a bit more?
[2015] <patarr> If it's synchronous, it should hit the OS's buffers and then eventually get flushed. Even if the VM dies, as I understand it.
[2015] <patarr> If it's asynchronous, you may have a thread that's still not done processing it, and when the VM dies it's gone
[2015] <[diecast]> i'm looking for release examples using jenkins/gradle/etc - are there any recommended sites or talks those of you who have them are willing to share? thanks.
[2016] <freeone3000> patarr: Yes, which is why I said you lose messages if the VM dies. Most times you're using logging (for that matter, most times you're using java) are in a server-side, long-running environment where a VM death is an unexpected event.
[2017] <patarr> In which having some logs may be useful? :)
[2019] <freeone3000> Usually ends up in hs_err_pid.
[2019] <patarr> Okay. I will look into that. Thank you guys
[2019] <freeone3000> (Java does its own logging for VM crashes in native code, and you can enable it for OOME.)
[2020] <patarr> Another design question though, should the logger be created using the Impl's .class, or the interface's?
[2021] <sproingie> you can't instantiate an interface without an implementation
[2022] <patarr> I meant as in LogFactory.getLogger(myImpl.class) or (TheInterface.class)
[2030] <sproingie> i would say implementation
[2031] <sproingie> hopefully they have enough namespace in common that you can use a common log configuration for either
[2033] <horny-sama> Can someone give me a hand on implmenting some pesudocode?
[2038] <Rarrikins> ~~~~~~~
[2038] <javabot> The syntax is: tell nick about factoid - you missed out the 'about', Rarrikins
[2038] <cheeser> horny-sama: no.  this is a java channel.  if you can't handle *pseudocode* then something is wrong.
[2039] <horny-sama> cheeser: depends on the type of pseudocode
[2039] <horny-sama> pseudocode with set notation and all those crappy stuff
[2049] <Squarism> isnt a ssh tunnel to a remote server enough to connect with JConsole to a remote java app?
[2050] <idletask> Squarism: provided the tunnel is configured correctly, yes
[2051] <idletask> SSH tunnels are "protocol agnostic", so to speak
[2054] <Skapadapaduu> is there way to dynamically calculate two or more variables inside java bean and save result to another variable? like this: http://pastebin.com/Yij3jrn6 but this doesn't compile
[2055] <dmlloyd> Skapadapaduu: what you have there is an expression whose result is the value you want.  To actually assign it to the "result" field, you need to use the assignment operator "=".
[2055] <dmlloyd> result = price * quantity;
[2055] <dmlloyd> also, don't get confused by "java beans", they don't really have anything to do with the actual language of Java.
[2056] <dmlloyd> go through the tutorials first, and learn the actual language.  Then only come back to "java beans" if you're actually using a framework which uses them.
[2059] <Skapadapaduu> oh-my, of course like that.. thanks.
[2121] <demifuror> hi guys, is there a rough guideline i.e. number of executing threads * number of calls the threads make, to indicate, how many times you should run a mulithreaded demo, before any concurrency issues show up?
[2125] <svm_invictvs> The CharBuffer type, does it handle encoding at all?
[2125] <aaearon> i have a json object that contains numerous other json objects (named ¨1¨ through ¨50¨). how would i get those json objects using gson?
[2127] <Matthijs> Why not use a json array?
[2130] <freeone3000> svm_invictvs: Yes. They're utf-16 chars.
[2130] <k5_> demifuror:  yes. you add threads until concurrency issues present themselves
[2131] <ron> and then you add some more.
[2131] <aaearon> Matthijs its not an array so im guessing that it wont let me treat it as ssuch Matthijs
[2132] <ron> aaearon: sounds like it's a map.
[2134] <Matthijs> aaearon: Just use JsonObject.entrySet and loop over the elements
[2134] <ron> or use a map.
[2136] <svm_invictvs> freeone3000: The JLS says taht char is always UTF16?
[2136] <freeone3000> svm_invictvs: As does CharSequence.
[2136] <freeone3000> svm_invictvs: And, for that matter, CharBuffer.
[2138] <eptalon> heyas
[2142] <cheeser> ~ping
[2142] <javabot> http://imgur.com/gallery/bSzgOt8
[2143] <eptalon> does anybody see a way to efficiently implement a multi-dimensional BitSet?
[2143] <wyvern> sure: wrap a BitSet of size m * n
[2144] <eptalon> array of BitSet...
[2144] <wyvern> that's more random pointer chasing.
[2145] <svm_invictvs> cheeser: heh
